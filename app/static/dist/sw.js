const f="1.1.0-d38e04c",r=`questbycycle-${f}`,h=["/","/offline.html","/static/dist/style.css","/static/dist/main.js","/static/icons/icon_48x48.webp","/static/icons/icon_96x96.webp","/static/icons/icon_192x192.webp","/static/icons/icon_512x512.webp","/static/icons/apple-touch-icon-180x180.png","/static/images/welcomeQuestByCycle.webp"],p="questbycycle-sync",o="queued";function u(){return new Promise((e,s)=>{const t=indexedDB.open(p,1);t.onupgradeneeded=c=>{c.target.result.createObjectStore(o,{autoIncrement:!0})},t.onsuccess=()=>e(t.result),t.onerror=()=>s(t.error)})}async function w(e){const s=await u();return new Promise((t,c)=>{const n=s.transaction(o,"readwrite");n.objectStore(o).add(e),n.oncomplete=()=>t(),n.onerror=()=>c(n.error)})}async function y(e){const s=await u();return new Promise((t,c)=>{const l=s.transaction(o,"readonly").objectStore(o).openCursor();l.onsuccess=async d=>{const i=d.target.result;i?(await e(i.value,i.key),i.continue()):t()},l.onerror=()=>c(l.error)})}async function m(e){const s=await u();return new Promise((t,c)=>{const n=s.transaction(o,"readwrite");n.objectStore(o).delete(e),n.oncomplete=()=>t(),n.onerror=()=>c(n.error)})}async function g(){await y(async(e,s)=>{try{await fetch(e.url,{method:e.method,headers:e.headers,body:e.body}),await m(s)}catch(t){console.error("Background sync failed for",e.url,t)}})}self.addEventListener("install",e=>{e.waitUntil((async()=>{const s=await caches.open(r);try{await s.addAll(h),console.log("Resources cached successfully!")}catch(t){console.error("Failed to cache resources:",t)}})())});self.addEventListener("activate",e=>{e.waitUntil((async()=>{const s=await caches.keys();let t=!1;await Promise.all(s.map(c=>{if(c!==r)return console.log(`Deleting old cache: ${c}`),t=!0,caches.delete(c)})),await clients.claim(),t&&q()})())});function q(){self.clients.matchAll().then(e=>{e.forEach(s=>{s.postMessage({type:"UPDATE_AVAILABLE"})})})}function E(e){return e.method!=="GET"||(e.headers.get("Accept")||"").includes("application/json")?!1:new URL(e.url).origin===self.location.origin}self.addEventListener("fetch",e=>{if(new URL(e.request.url).origin===self.location.origin){if(["POST","PUT","DELETE"].includes(e.request.method)&&e.request.mode!=="navigate"){e.respondWith((async()=>{try{return await fetch(e.request.clone())}catch{const t={};for(const[n,a]of e.request.headers.entries())t[n]=a;const c=await e.request.clone().text();return await w({url:e.request.url,method:e.request.method,headers:t,body:c}),"sync"in self.registration&&await self.registration.sync.register("sync-requests"),new Response(JSON.stringify({queued:!0}),{status:202,headers:{"Content-Type":"application/json"}})}})());return}if(e.request.mode==="navigate"){e.respondWith((async()=>{try{const t=await fetch(e.request);return(await caches.open(r)).put(e.request,t.clone()),t}catch{return await caches.match(e.request)||caches.match("/offline.html")}})());return}e.respondWith((async()=>{try{const t=await caches.open(r),c=await t.match(e.request);if(c)return c;const n=await fetch(e.request);if(E(e.request)&&n.status!==206)try{t.put(e.request,n.clone())}catch(a){console.error("Cache put failed:",a)}return n}catch(t){return console.error("Fetch failed; returning offline page instead.",t),await caches.match("/offline.html")||Response.error()}})())}});self.addEventListener("sync",e=>{e.tag==="sync-requests"&&e.waitUntil(g())});self.addEventListener("message",e=>{e.data.type==="SKIP_WAITING"&&self.skipWaiting()});self.addEventListener("sync",e=>{e.tag==="sync-notifications"&&e.waitUntil(fetch("/notifications/unread_count"))});self.addEventListener("periodicsync",e=>{e.tag==="periodic-notifications"&&e.waitUntil(fetch("/notifications/unread_count"))});self.addEventListener("push",e=>{let s={};if(e.data)try{s=e.data.json()}catch{s={body:e.data.text()}}const t=s.title||"QuestByCycle",c={body:s.body||"",icon:"/static/icons/icon_96x96.webp",data:s};e.waitUntil(self.registration.showNotification(t,c))});self.addEventListener("notificationclick",e=>{e.notification.close(),e.waitUntil(clients.openWindow("/notifications/"));const s=e.notification.data&&e.notification.data.url;s&&e.waitUntil(clients.openWindow(s))});
