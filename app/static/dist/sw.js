const f="1.1.0-9d82219",r=`questbycycle-${f}`,h=["/","/offline.html","/static/dist/style.css","/static/dist/main.js","/static/icons/icon_48x48.png","/static/icons/icon_96x96.png","/static/icons/icon_192x192.png","/static/icons/icon_512x512.png","/static/icons/apple-touch-icon-180x180.png","/static/images/welcomeQuestByCycle.webp"],p="questbycycle-sync",o="queued";function u(){return new Promise((t,s)=>{const e=indexedDB.open(p,1);e.onupgradeneeded=n=>{n.target.result.createObjectStore(o,{autoIncrement:!0})},e.onsuccess=()=>t(e.result),e.onerror=()=>s(e.error)})}async function y(t){const s=await u();return new Promise((e,n)=>{const c=s.transaction(o,"readwrite");c.objectStore(o).add(t),c.oncomplete=()=>e(),c.onerror=()=>n(c.error)})}async function w(t){const s=await u();return new Promise((e,n)=>{const l=s.transaction(o,"readonly").objectStore(o).openCursor();l.onsuccess=async d=>{const i=d.target.result;i?(await t(i.value,i.key),i.continue()):e()},l.onerror=()=>n(l.error)})}async function g(t){const s=await u();return new Promise((e,n)=>{const c=s.transaction(o,"readwrite");c.objectStore(o).delete(t),c.oncomplete=()=>e(),c.onerror=()=>n(c.error)})}async function m(){await w(async(t,s)=>{try{await fetch(t.url,{method:t.method,headers:t.headers,body:t.body}),await g(s)}catch(e){console.error("Background sync failed for",t.url,e)}})}self.addEventListener("install",t=>{t.waitUntil((async()=>{const s=await caches.open(r);try{await s.addAll(h),console.log("Resources cached successfully!")}catch(e){console.error("Failed to cache resources:",e)}})())});self.addEventListener("activate",t=>{t.waitUntil((async()=>{const s=await caches.keys();let e=!1;await Promise.all(s.map(n=>{if(n!==r)return console.log(`Deleting old cache: ${n}`),e=!0,caches.delete(n)})),await clients.claim(),e&&q()})())});function q(){self.clients.matchAll().then(t=>{t.forEach(s=>{s.postMessage({type:"UPDATE_AVAILABLE"})})})}function E(t){return t.method!=="GET"||(t.headers.get("Accept")||"").includes("application/json")?!1:new URL(t.url).origin===self.location.origin}self.addEventListener("fetch",t=>{if(new URL(t.request.url).origin===self.location.origin){if(["POST","PUT","DELETE"].includes(t.request.method)&&t.request.mode!=="navigate"){t.respondWith((async()=>{try{return await fetch(t.request.clone())}catch{const e={};for(const[c,a]of t.request.headers.entries())e[c]=a;const n=await t.request.clone().text();return await y({url:t.request.url,method:t.request.method,headers:e,body:n}),"sync"in self.registration&&await self.registration.sync.register("sync-requests"),new Response(JSON.stringify({queued:!0}),{status:202,headers:{"Content-Type":"application/json"}})}})());return}if(t.request.mode==="navigate"){t.respondWith((async()=>{try{const e=await fetch(t.request);return(await caches.open(r)).put(t.request,e.clone()),e}catch{return await caches.match(t.request)||caches.match("/offline.html")}})());return}t.respondWith((async()=>{try{const e=await caches.open(r),n=await e.match(t.request);if(n)return n;const c=await fetch(t.request);if(E(t.request)&&c.status!==206)try{e.put(t.request,c.clone())}catch(a){console.error("Cache put failed:",a)}return c}catch(e){return console.error("Fetch failed; returning offline page instead.",e),await caches.match("/offline.html")||Response.error()}})())}});self.addEventListener("sync",t=>{t.tag==="sync-requests"&&t.waitUntil(m())});self.addEventListener("message",t=>{t.data.type==="SKIP_WAITING"&&self.skipWaiting()});self.addEventListener("sync",t=>{t.tag==="sync-notifications"&&t.waitUntil(fetch("/notifications/unread_count"))});self.addEventListener("periodicsync",t=>{t.tag==="periodic-notifications"&&t.waitUntil(fetch("/notifications/unread_count"))});self.addEventListener("push",t=>{let s={};if(t.data)try{s=t.data.json()}catch{s={body:t.data.text()}}const e=s.title||"QuestByCycle",n={body:s.body||"",icon:"/static/icons/icon_96x96.png",data:s};t.waitUntil(self.registration.showNotification(e,n))});self.addEventListener("notificationclick",t=>{t.notification.close(),t.waitUntil(clients.openWindow("/notifications/"));const s=t.notification.data&&t.notification.data.url;s&&t.waitUntil(clients.openWindow(s))});
